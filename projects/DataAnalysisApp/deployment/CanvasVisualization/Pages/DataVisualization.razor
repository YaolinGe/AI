@page "/data-visualization"
@using System.Threading.Tasks
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject ILogger<DataVisualization> Logger

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Signal Controls</h5>
                    <div class="form-group">
                        <label for="signalType">Signal Type:</label>
                        <select id="signalType" class="form-control" @bind="SignalType">
                            <option value="sine">Sine Wave</option>
                            <option value="cosine">Cosine Wave</option>
                            <option value="gaussian">Gaussian</option>
                            <option value="random">Random</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="frequency">Frequency (Hz):</label>
                        <input type="number" id="frequency" class="form-control" @bind="Frequency" @bind:event="oninput" />
                    </div>
                    <div class="form-group">
                        <label for="windowSize">Window Size:</label>
                        <input type="number" id="windowSize" class="form-control" @bind="WindowSize" @bind:event="oninput" />
                    </div>
                    <button class="btn btn-primary" @onclick="ToggleStreaming">
                        @(IsStreaming ? "Stop" : "Start") Streaming
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <canvas @ref="canvas" id="signalCanvas" style="width: 100%; height: 400px;"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ElementReference canvas;
    private bool IsStreaming { get; set; }
    private string SignalType { get; set; } = "sine";
    private double Frequency { get; set; } = 1000;
    private int WindowSize { get; set; } = 100;
    private IJSObjectReference? module;
    private IDisposable? timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/signalVisualizer.js");
            await module.InvokeVoidAsync("initializeCanvas", canvas);
        }
    }

    private async Task ToggleStreaming()
    {
        if (!IsStreaming)
        {
            IsStreaming = true;
            timer = new Timer(async _ => await UpdateSignal(), null, 0, (int)(1000 / Frequency));
        }
        else
        {
            IsStreaming = false;
            timer?.Dispose();
            timer = null;
        }
    }

    private async Task UpdateSignal()
    {
        if (!IsStreaming || module == null) return;

        try
        {
            var data = GenerateSignalData();
            await module.InvokeVoidAsync("updateSignal", data, WindowSize);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating signal");
        }
    }

    private double[] GenerateSignalData()
    {
        var data = new double[WindowSize];
        var time = DateTime.Now.Ticks / 10000.0; // Current time in milliseconds

        for (int i = 0; i < WindowSize; i++)
        {
            data[i] = SignalType switch
            {
                "sine" => Math.Sin(2 * Math.PI * Frequency * (time + i) / 1000),
                "cosine" => Math.Cos(2 * Math.PI * Frequency * (time + i) / 1000),
                "gaussian" => GenerateGaussianNoise(),
                "random" => Random.Shared.NextDouble() * 2 - 1,
                _ => 0
            };
        }

        return data;
    }

    private double GenerateGaussianNoise()
    {
        double u1 = Random.Shared.NextDouble();
        double u2 = Random.Shared.NextDouble();
        double z0 = Math.Sqrt(-2.0 * Math.Log(u1)) * Math.Cos(2.0 * Math.PI * u2);
        return z0;
    }

    public async ValueTask DisposeAsync()
    {
        if (timer != null)
        {
            timer.Dispose();
        }

        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
} 